// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Comment struct {
	User      *User  `json:"user"`
	CreatedAt string `json:"createdAt"`
	UpdatedAt string `json:"updatedAt"`
}

type Locate struct {
	Lat float64 `json:"lat"`
	Lng float64 `json:"lng"`
}

type LocateInput struct {
	Lat float64 `json:"lat"`
	Lng float64 `json:"lng"`
}

type NewPerformance struct {
	Name        string       `json:"name"`
	Description string       `json:"description"`
	Start       string       `json:"start"`
	Finish      string       `json:"finish"`
	Thumbnail   *string      `json:"thumbnail"`
	Location    *LocateInput `json:"location"`
	Address     string       `json:"address"`
	Tags        []string     `json:"tags"`
}

type NewUser struct {
	Name      string  `json:"name"`
	ImageIcon *string `json:"imageIcon"`
}

type Performance struct {
	ID          string     `json:"id"`
	Name        string     `json:"name"`
	Description string     `json:"description"`
	Start       string     `json:"start"`
	Tags        []string   `json:"tags"`
	Finish      string     `json:"finish"`
	Thumbnail   *string    `json:"thumbnail"`
	Location    *Locate    `json:"location"`
	Address     string     `json:"address"`
	Artist      *User      `json:"artist"`
	Comments    []*Comment `json:"comments"`
}

type User struct {
	ID            string   `json:"id"`
	UserType      UserType `json:"userType"`
	Name          string   `json:"name"`
	ImageIcon     string   `json:"imageIcon"`
	FollowArtists []string `json:"followArtists"`
	Performances  []string `json:"performances"`
}

type UserType string

const (
	UserTypeUser   UserType = "User"
	UserTypeArtist UserType = "Artist"
)

var AllUserType = []UserType{
	UserTypeUser,
	UserTypeArtist,
}

func (e UserType) IsValid() bool {
	switch e {
	case UserTypeUser, UserTypeArtist:
		return true
	}
	return false
}

func (e UserType) String() string {
	return string(e)
}

func (e *UserType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserType", str)
	}
	return nil
}

func (e UserType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
